plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
}

/**
 * Load keystore - This is to keep keys out of source control.
 * Keystore needs to have the following properties defined.
 * GOOGLE_PLACES_API_KEY
 *
 * These keys can be obtained from https://cloud.google.com/maps-platform/
 */
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    buildFeatures {
        compose true
        viewBinding true
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.1.1"
    }

    compileSdkVersion 32

    defaultConfig {
        applicationId "com.jkane.a20220402_joshkane_nycschools"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        // Normally this would be a good place to separate Urls for staging vs production
        // but since this is a small project without a proper staging environment, I will
        // just duplicate the values
        debug {
            buildConfigField('String', 'BASE_URL', '"https://data.cityofnewyork.us/"')
            buildConfigField('String', 'SAT_2012', '"f9bf-2cp4"')
            buildConfigField('String', 'SCHOOL_DIRECTORY_2017', '"s3k6-pzi2"')
            buildConfigField('Boolean', 'PLACES_API_ENABLED', 'true')
            buildConfigField('Boolean', 'COMPOSE_VIEW', 'true')
            buildConfigField('String', 'PLACES_BASE_URL',
                    '"https://maps.googleapis.com/maps/api/place/"')
            buildConfigField 'String', "GOOGLE_PLACES_API_KEY",
                    keystoreProperties.getProperty("GOOGLE_PLACES_API_KEY")
        }
        release {
            buildConfigField('String', 'BASE_URL', '"https://data.cityofnewyork.us/"')
            buildConfigField('String', 'SAT_2012', '"f9bf-2cp4"')
            buildConfigField('String', 'SCHOOL_DIRECTORY_2017', '"s3k6-pzi2"')
            buildConfigField('Boolean', 'PLACES_API_ENABLED', 'false')
            buildConfigField('Boolean', 'COMPOSE_VIEW', 'false') // some might argue compose still isn't production ready :)
            buildConfigField('String', 'PLACES_BASE_URL',
                    '"https://maps.googleapis.com/maps/api/place/"')
            buildConfigField 'String', "GOOGLE_PLACES_API_KEY",
                    keystoreProperties.getProperty("GOOGLE_PLACES_API_KEY")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Default AS Boilerplate dependencies
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Retrofit dependencies for network calls
    // https://square.github.io/retrofit/
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // RxJava dependencies for rx functionality
    // https://github.com/ReactiveX/RxJava or http://reactivex.io/
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    // Chuck dependencies for HTTP inspection
    // https://github.com/jgilfelt/chuck
    debugImplementation "com.readystatesoftware.chuck:library:$chuck_version"
    releaseImplementation "com.readystatesoftware.chuck:library-no-op:$chuck_version"

    // Dagger dependencies for dependency injection
    // https://github.com/google/dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"

    // Glide dependencies for image loading
    // https://github.com/bumptech/glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // Landscapist for loading images with Jetpack Compose
    // https://github.com/skydoves/landscapist
    implementation "com.github.skydoves:landscapist-glide:1.5.0"

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:2.19.0"
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    debugImplementation 'androidx.fragment:fragment-testing:1.4.1'

    // Compose
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Compose Material Design
    implementation 'androidx.compose.material:material:1.1.1'
    // Animations
    implementation 'androidx.compose.animation:animation:1.1.1'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.1.1'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.1'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.1.1'
    // When using a AppCompat theme
    implementation "com.google.accompanist:accompanist-appcompat-theme:0.16.0"
}
